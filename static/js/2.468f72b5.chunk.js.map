{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/profileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostContainer.jsx","components/Profile/Profile.jsx","../node_modules/reselect/es/index.js","redux/profile-selects.js","components/Profile/ProfileContainer.jsx"],"names":["module","exports","descriptionBlock","img","description","contacts","contactsDescr","contact","postsBlock","posts","item","ProfileStatusWithHooks","props","_useState","useState","_useState2","Object","slicedToArray","editMode","setEditMode","_useState3","status","_useState4","setStatus","useEffect","react_default","a","createElement","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","value","ProfileDataReduxForm","reduxForm","form","_ref","handleSubmit","profile","error","onSubmit","className","style","formSummaryError","createField","Input","type","TextArea","keys","map","key","s","toLocaleLowerCase","ProfileData","_ref2","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","ProfileInfo_Contact","contactTitle","contactValue","Contact","_ref3","ProfileInfo","savePhoto","saveProfile","profileUpdateStatus","src","photos","large","userPhoto","target","files","length","ProfileInfo_ProfileDataForm","initialValues","formData","then","ProfileInfo_ProfileData","profileStatusWithHooks","preloader","Post","message","likesCount","maxLength","maxLengthCreator","MyPosts","React","memo","postsElements","p","MyPosts_Post_Post","id","AddPostFormReact","addPost","addNewPost","Field","component","name","validate","required","placeholder","MyPostContainer","connect","state","profilePage","newPostText","dispatch","addPostActionCreator","Profile","Profile_ProfileInfo_ProfileInfo","assign","MyPosts_MyPostContainer","defaultEqualityCheck","b","createSelector","memoize","_len","arguments","memoizeOptions","Array","_key","_len2","funcs","_key2","recomputations","resultFunc","pop","dependencies","isArray","every","dep","dependencyTypes","join","Error","getDependencies","memoizedResultFunc","apply","undefined","concat","selector","params","i","push","resetRecomputations","createSelectorCreator","func","equalityCheck","lastArgs","lastResult","prev","next","areArgumentsShallowlyEqual","getProfile","getProfileStatus","getAuthorizedUserId","auth","getProfileUpdateStatus","compose","authorizedUserId","setUsersProfile","setProfileUser","getStatus","withRouter","refreshProfile","userId","match","history","components_Profile_Profile"],"mappings":"6EACAA,EAAAC,QAAA,CAAkBC,iBAAA,sCAAAC,IAAA,yBAAAC,YAAA,iCAAAC,SAAA,8BAAAC,cAAA,mCAAAC,QAAA,mDCAlBP,EAAAC,QAAA,CAAkBO,WAAA,4BAAAC,MAAA,6CCAlBT,EAAAC,QAAA,CAAkBS,KAAA,qICmCHC,EAjCgB,SAACC,GAAU,IAAAC,EACRC,oBAAS,GADDC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACjCK,EADiCH,EAAA,GACvBI,EADuBJ,EAAA,GAAAK,EAEZN,mBAASF,EAAMS,QAFHC,EAAAN,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEjCC,EAFiCC,EAAA,GAEzBC,EAFyBD,EAAA,GAiBtC,OAJAE,oBAAU,WACPD,EAAUX,EAAMS,SACjB,CAACT,EAAMS,SAILI,EAAAC,EAAAC,cAAA,YACOT,GACCO,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,oBAAcF,EAAAC,EAAAC,cAAA,QAAMC,cAnBX,WACrBT,GAAY,KAkBsDP,EAAMS,QAAU,aAG7EH,GACGO,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOE,WAAW,EAAMC,OArBb,WACvBX,GAAY,GACZP,EAAMmB,aAAaV,IAmB6CW,SAjB7C,SAACC,GACpBV,EAAUU,EAAEC,cAAcC,QAgBgEA,MAAOd,yCCG1Fe,EADcC,YAAU,CAACC,KAAM,gBAAjBD,CA3BL,SAAAE,GAAkC,IAAhCC,EAAgCD,EAAhCC,aAAaC,EAAmBF,EAAnBE,QAAQC,EAAWH,EAAXG,MAC3C,OAAOjB,EAAAC,EAAAC,cAAA,QAAMgB,SAAUH,GACtBE,GAASjB,EAAAC,EAAAC,cAAA,OAAKiB,UAAWC,IAAMC,kBAAmBJ,GACnDjB,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,uBACLF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,sBADJ,MACwBoB,YAAY,YAAa,WAAW,GAAGC,MAE/DvB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,8BADJ,MACgCoB,YAAY,GAAI,iBAAiB,GAAGC,IAAM,CAACC,KAAM,cAEjFxB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,mCADJ,KAEKoB,YAAY,yBAA0B,4BAA4B,GAAGG,MAG1EzB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,qBADJ,MACuBoB,YAAY,WAAY,UAAU,GAAGG,MAE5DzB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,qBADJ,MACuBX,OAAOmC,KAAKV,EAAQpC,UAAU+C,IAAI,SAAAC,GACjD,OAAO5B,EAAAC,EAAAC,cAAA,OAAKiB,UAAWU,IAAE/C,QAAS8C,IAAKA,GACnC5B,EAAAC,EAAAC,cAAA,SAAI0B,EAAKN,YAAYM,EAAK,YAAcA,EAAIE,oBAAoB,GAAGP,aCc7EQ,EAAc,SAAAC,GAAoC,IAAlChB,EAAkCgB,EAAlChB,QAAQiB,EAA0BD,EAA1BC,QAAQC,EAAkBF,EAAlBE,aAClC,OAAOlC,EAAAC,EAAAC,cAAA,WACN+B,GAAWjC,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,UAAQiC,QAASD,GAAjB,SACjBlC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,sBADJ,MACwBc,EAAQoB,UAEhCpC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,8BADJ,MACgCc,EAAQqB,eAAiB,MAAQ,MAEhErB,EAAQqB,gBACLrC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,mCADJ,MACqCc,EAAQsB,2BAGjDtC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,qBADJ,MACuBc,EAAQuB,SAE/BvC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,qBADJ,MACuBX,OAAOmC,KAAKV,EAAQpC,UAAU+C,IAAI,SAAAC,GAAG,OAAI5B,EAAAC,EAAAC,cAACsC,EAAD,CAASC,aAAcb,EAAKc,aAAc1B,EAAQpC,SAASgD,GAAMA,IAAKA,SAIpIe,EAAU,SAAAC,GAAiC,IAA/BH,EAA+BG,EAA/BH,aAAaC,EAAkBE,EAAlBF,aAC3B,OACI1C,EAAAC,EAAAC,cAAA,OAAKiB,UAAWU,IAAE/C,SAASkB,EAAAC,EAAAC,cAAA,SAAIuC,GAA/B,MAAoDC,IAG7CG,EA5DK,SAAA/B,GAAqF,IAAnFE,EAAmFF,EAAnFE,QAAQpB,EAA2EkB,EAA3ElB,OAAOU,EAAoEQ,EAApER,aAAa2B,EAAuDnB,EAAvDmB,QAAQa,EAA+ChC,EAA/CgC,UAAUC,EAAqCjC,EAArCiC,YAAYC,EAAyBlC,EAAzBkC,oBAAyB5D,EACtEC,oBAAS,GAD6DC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC9FK,EAD8FH,EAAA,GACrFI,EADqFJ,EAAA,GAgBrG,OAAK0B,EAIGhB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKiB,UAAU,UACXnB,EAAAC,EAAAC,cAAA,OAAKiB,UAAWU,IAAEnD,IAAKuE,IAAKjC,EAAQkC,OAAOC,OAASC,MACnDnB,GAAWjC,EAAAC,EAAAC,cAAA,SAAOsB,KAAK,OAAOjB,SAZnB,SAACC,GACtBA,EAAE6C,OAAOC,MAAMC,QACfT,EAAUtC,EAAE6C,OAAOC,MAAM,OAWf7D,EACCO,EAAAC,EAAAC,cAACsD,EAAD,CAAsBC,cAAezC,EAASE,SAvB/C,SAACwC,GACdX,EAAYW,GAAUC,KAAK,WACI,YAAxBX,GACCtD,GAAY,MAoB4DsB,QAASA,IAC3EhB,EAAAC,EAAAC,cAAC0D,EAAD,CAAa5C,QAASA,EAASiB,QAASA,EAASC,aAAc,kBAAMxC,GAAY,MACnFM,EAAAC,EAAAC,cAAC2D,EAAD,CAAwBjE,OAAQA,EAAQU,aAAcA,MAV3DN,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,mDCTAC,EAZF,SAAC5E,GACZ,OACEa,EAAAC,EAAAC,cAAA,OAAKiB,UAAWU,IAAE5C,MAChBe,EAAAC,EAAAC,cAAA,OAAK+C,IAAI,4FACL9D,EAAM6E,QACNhE,EAAAC,EAAAC,cAAA,WACFF,EAAAC,EAAAC,cAAA,oBADE,IACkBf,EAAM8E,+BCH9BC,EAAYC,YAAiB,KA0C3BC,EAAUC,IAAMC,KAAK,SAACnF,GAExB,IAAIoF,EACApF,EAAMH,MAAM2C,IAAI,SAAA6C,GAAC,OAAIxE,EAAAC,EAAAC,cAACuE,EAAD,CAAMT,QAASQ,EAAER,QAASC,WAAYO,EAAEP,WAAYrC,IAAK4C,EAAEE,OAIpF,OACI1E,EAAAC,EAAAC,cAAA,OAAKiB,UAAWU,IAAE9C,YACdiB,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAACyE,EAAD,CAAkBzD,SANX,SAACwC,GACZvE,EAAMyF,QAAQlB,EAASmB,eAMnB7E,EAAAC,EAAAC,cAAA,OAAKiB,UAAWU,IAAE7C,OACbuF,MAkBXI,EAAmB/D,YAAU,CAC/BC,KAAM,eADeD,CAbL,SAACzB,GAEjB,OACIa,EAAAC,EAAAC,cAAA,QAAMgB,SAAU/B,EAAM4B,cAClBf,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC4E,EAAA,EAAD,CAAOC,UAAWtD,IAAUuD,KAAK,aAAaC,SAAU,CAACC,IAAUhB,GAAYiB,YAAa,qBAEhGnF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,8BASDkE,YC7DAgB,EAFSC,YAdF,SAACC,GACnB,MAAO,CACHtG,MAAOsG,EAAMC,YAAYvG,MACzBwG,YAAaF,EAAMC,YAAYC,cAGd,SAACC,GACtB,MAAO,CACHb,QAAS,SAACY,GACNC,EAASC,YAAqBF,OAKlBH,CAA4CjB,GCLrDuB,EAVC,SAACxG,GACb,OACIa,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC0F,EAADrG,OAAAsG,OAAA,GAAiB1G,EAAjB,CAAwB8C,QAAS9C,EAAM8C,QAASa,UAAW3D,EAAM2D,UAAWC,YAAa5D,EAAM4D,YAAaC,oBAAqB7D,EAAM6D,uBACvIhD,EAAAC,EAAAC,cAAC4F,EAAD,wBCRZ,SAAAC,EAAA9F,EAAA+F,GACA,OAAA/F,IAAA+F,EAgGO,IAAAC,EA7CA,SAAAC,GACP,QAAAC,EAAAC,UAAA7C,OAAA8C,EAAAC,MAAAH,EAAA,EAAAA,EAAA,KAAAI,EAAA,EAA8FA,EAAAJ,EAAaI,IAC3GF,EAAAE,EAAA,GAAAH,UAAAG,GAGA,kBACA,QAAAC,EAAAJ,UAAA7C,OAAAkD,EAAAH,MAAAE,GAAAE,EAAA,EAAuEA,EAAAF,EAAeE,IACtFD,EAAAC,GAAAN,UAAAM,GAGA,IAAAC,EAAA,EACAC,EAAAH,EAAAI,MACAC,EA3BA,SAAAL,GACA,IAAAK,EAAAR,MAAAS,QAAAN,EAAA,IAAAA,EAAA,GAAAA,EAEA,IAAAK,EAAAE,MAAA,SAAAC,GACA,0BAAAA,IACG,CACH,IAAAC,EAAAJ,EAAAnF,IAAA,SAAAsF,GACA,cAAAA,IACKE,KAAA,MACL,UAAAC,MAAA,wGAAAF,EAAA,KAGA,OAAAJ,EAeAO,CAAAZ,GACAa,EAAApB,EAAAqB,WAAAC,EAAA,YAGA,OAFAb,IAEAC,EAAAW,MAAA,KAAAnB,aACKqB,OAAApB,IAELqB,EAAAxB,EAAA,WAIA,IAHA,IAAAyB,EAAA,GACApE,EAAAuD,EAAAvD,OAEAqE,EAAA,EAAqBA,EAAArE,EAAYqE,IAEjCD,EAAAE,KAAAf,EAAAc,GAAAL,MAAA,KAAAnB,YAIA,OAAAkB,EAAAC,MAAA,KAAAI,KAaA,OAXAD,EAAAd,aACAc,EAAAZ,eAEAY,EAAAf,eAAA,WACA,OAAAA,GAGAe,EAAAI,oBAAA,WACA,OAAAnB,EAAA,GAGAe,GAGOK,CA5EA,SAAAC,GACP,IAAAC,EAAA7B,UAAA7C,OAAA,QAAAiE,IAAApB,UAAA,GAAAA,UAAA,GAAAL,EACAmC,EAAA,KACAC,EAAA,KAEA,kBAOA,OA7BA,SAAAF,EAAAG,EAAAC,GACA,UAAAD,GAAA,OAAAC,GAAAD,EAAA7E,SAAA8E,EAAA9E,OACA,SAMA,IAFA,IAAAA,EAAA6E,EAAA7E,OAEAqE,EAAA,EAAiBA,EAAArE,EAAYqE,IAC7B,IAAAK,EAAAG,EAAAR,GAAAS,EAAAT,IACA,SAIA,SASAU,CAAAL,EAAAC,EAAA9B,aAEA+B,EAAAH,EAAAT,MAAA,KAAAnB,YAGA8B,EAAA9B,UACA+B,KC/BA,IAGWI,EAAatC,EAHC,SAACX,GACtB,OAAOA,EAAMC,YAAYvE,SAE6B,SAACA,GACvD,OAAOA,IAEAwH,EAAmB,SAAClD,GAC3B,OAAOA,EAAMC,YAAY3F,QAElB6I,EAAsB,SAACnD,GAC9B,OAAOA,EAAMoD,KAAKhE,IAKXiE,EAAyB,SAACrD,GACjC,OAAOA,EAAMC,YAAYvC,qBCyBd4F,sBACXvD,YAVkB,SAACC,GACnB,MAAO,CACHtE,QAASuH,EAAWjD,GACpB1F,OAAQ4I,EAAiBlD,GACzBuD,iBAAkBJ,EAAoBnD,GACtCtC,oBAAqB2F,EAAuBrD,KAKtB,CACtBwD,oBACAC,mBACAC,cACA1I,iBACAwC,cACAC,kBAEJkG,IATWL,CAlCS,SAACzJ,GACrB,IAAM+J,EAAkB,WACpB,IAAIC,EAAShK,EAAMiK,MAAMzB,OAAOwB,OAC5BA,IACAA,EAAShK,EAAM0J,mBAEX1J,EAAMkK,QAAQxB,KAAK,UAG3B1I,EAAM4J,eAAeI,GACrBhK,EAAM6J,UAAUG,IAQpB,OANApJ,oBAAU,WACNmJ,KACF,CAAC/J,EAAMiK,MAAMzB,OAAOwB,SACtBpJ,oBAAU,WACNmJ,KACF,IAEElJ,EAAAC,EAAAC,cAAA,WAEIF,EAAAC,EAAAC,cAACoJ,EAAD/J,OAAAsG,OAAA,GAAa1G,EAAb,CAAoB8C,SAAU9C,EAAMiK,MAAMzB,OAAOwB,OAAQrG,UAAW3D,EAAM2D,UAAWC,YAAa5D,EAAM4D,YAAaC,oBAAqB7D,EAAM6D","file":"static/js/2.468f72b5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1Gx1x\",\"img\":\"ProfileInfo_img__31iuQ\",\"description\":\"ProfileInfo_description__39zFK\",\"contacts\":\"ProfileInfo_contacts__2w7Vx\",\"contactsDescr\":\"ProfileInfo_contactsDescr__2gt80\",\"contact\":\"ProfileInfo_contact__3NUrd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2XFKV\",\"posts\":\"MyPosts_posts__29Q5v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__EzNoY\"};","import React, { useState, useEffect } from 'react';\r\n\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n    const deactivateEditMode = () =>  {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    useEffect(() => {\r\n       setStatus(props.status); \r\n    },[props.status])\r\n     \r\n    return (\r\n        \r\n        <div>\r\n            { !editMode &&\r\n                <div>\r\n                    <b>Status:</b><span onDoubleClick={activateEditMode}>{props.status || '........'}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div >\r\n                    <input autoFocus={true} onBlur={deactivateEditMode} onChange={onStatusChange} value={status} />\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport { createField, Input, TextArea } from './../../common/FormsControls/FormsControls';\r\nimport { reduxForm } from 'redux-form';\r\nimport s from './ProfileInfo.module.css';\r\nimport style from '../../login/login.module.css';\r\nconst ProfileDataForm = ({handleSubmit,profile,error}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n    {error && <div className={style.formSummaryError}>{error}</div>}\r\n    <div><button>save</button></div>\r\n    <div>\r\n        <b>Full name</b> : {createField(\"Full name\", \"fullName\",[],Input)}\r\n    </div>\r\n    <div>\r\n        <b>Looking for a job</b> : {createField(\"\", \"lookingForAJob\",[],Input,{type: \"checkbox\"})}\r\n    </div>\r\n    <div>\r\n        <b>My professional skills</b> : \r\n        {createField(\"My professional skills\", \"lookingForAJobDescription\",[],TextArea)}\r\n    </div>\r\n    \r\n    <div>\r\n        <b>About me</b> : {createField(\"About me\", \"aboutMe\",[],TextArea)}\r\n    </div>\r\n    <div>\r\n        <b>Contacts</b> : {Object.keys(profile.contacts).map(key => {\r\n            return <div className={s.contact} key={key}>\r\n                <b>{key}{createField(key, \"contacts.\" + key.toLocaleLowerCase(),[],Input)}</b>\r\n            </div>\r\n        })}\r\n    </div>\r\n</form>\r\n}\r\nconst ProfileDataReduxForm = reduxForm({form: \"edit-profile\"})(ProfileDataForm)\r\nexport default ProfileDataReduxForm;","import React, { useState } from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport userPhoto from '../../../assetsImg/user.png';\r\nimport Preloader from '../../common/preloader/preloader';\r\nimport ProfileStatusWithHooks from './profileStatusWithHooks';\r\nimport ProfileDataReduxForm from './ProfileDataForm';\r\n\r\nconst ProfileInfo = ({profile,status,updateStatus,isOwner,savePhoto,saveProfile,profileUpdateStatus}) => {\r\n    const [editMode,setEditMode] = useState(false);\r\n    const onSubmit = (formData) => {\r\n        saveProfile(formData).then(() => {\r\n            if(profileUpdateStatus === 'success' ) {\r\n                setEditMode(false);\r\n                \r\n            }\r\n        })\r\n        \r\n    }\r\n    const onMainPhotoSelected = (e) => {\r\n        if(e.target.files.length) {\r\n           savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n    if (!profile) {\r\n        return <Preloader />\r\n    } else {\r\n        return (\r\n            <div>\r\n                <div className=\"avatar\">\r\n                    <img className={s.img} src={profile.photos.large || userPhoto} />\r\n                    {isOwner && <input type='file' onChange={onMainPhotoSelected}/>}\r\n                    {editMode\r\n                    ? <ProfileDataReduxForm initialValues={profile} onSubmit={onSubmit} profile={profile}/> \r\n                    : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => setEditMode(true)} />}\r\n                    <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst ProfileData = ({profile,isOwner,goToEditMode}) => {\r\n    return <div>\r\n    {isOwner && <div><button onClick={goToEditMode}>Edit</button></div>}\r\n    <div>\r\n        <b>Full name</b> : {profile.fullName}\r\n    </div>\r\n    <div>\r\n        <b>Looking for a job</b> : {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n    </div>\r\n    {profile.lookingForAJob &&\r\n        <div>\r\n            <b>My professional skills</b> : {profile.lookingForAJobDescription}\r\n        </div>\r\n    }\r\n    <div>\r\n        <b>About me</b> : {profile.aboutMe}\r\n    </div>\r\n    <div>\r\n        <b>Contacts</b> : {Object.keys(profile.contacts).map(key => <Contact contactTitle={key} contactValue={profile.contacts[key]} key={key}/>)}\r\n    </div>\r\n</div>\r\n}\r\nconst Contact = ({contactTitle,contactValue}) => {\r\n    return (\r\n        <div className={s.contact}><b>{contactTitle}</b> : {contactValue}</div>\r\n    )\r\n}\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n  return (\r\n    <div className={s.item}>\r\n      <img src='https://movies4maniacs.liberty.me/wp-content/uploads/sites/1218/2015/09/avatarsucks.jpg' />\r\n        { props.message }\r\n          <div>\r\n        <span>like</span> { props.likesCount }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post;","import React, { PureComponent } from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { required, maxLengthCreator } from '../../../utils/validators';\r\nimport { TextArea } from '../../common/FormsControls/FormsControls';\r\nlet maxLength = maxLengthCreator(100);\r\n\r\n/* class MyPosts extends PureComponent {\r\n    render() {\r\n        let postsElements =\r\n            this.props.posts.map(p => <Post message={p.message} likesCount={p.likesCount} key={p.id} />);\r\n        let onSubmit = (formData) => {\r\n            this.props.addPost(formData.addNewPost);\r\n        }\r\n        return (\r\n            <div className={s.postsBlock}>\r\n                <h3>My posts</h3>\r\n                <AddPostFormReact onSubmit={onSubmit} />\r\n                <div className={s.posts}>\r\n                    {postsElements}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n} */\r\n\r\n/* class MyPosts extends  {\r\n    shouldComponentUpdate(nextProps,nextState) {\r\n        return nextProps != this.props || nextState != this.state;\r\n    }\r\n    render() {\r\n        let postsElements =\r\n            this.props.posts.map(p => <Post message={p.message} likesCount={p.likesCount} key={p.id} />);\r\n        let onSubmit = (formData) => {\r\n            this.props.addPost(formData.addNewPost);\r\n        }\r\n        return (\r\n            <div className={s.postsBlock}>\r\n                <h3>My posts</h3>\r\n                <AddPostFormReact onSubmit={onSubmit} />\r\n                <div className={s.posts}>\r\n                    {postsElements}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n} */\r\nconst MyPosts = React.memo((props) => {\r\n   \r\n    let postsElements =\r\n        props.posts.map(p => <Post message={p.message} likesCount={p.likesCount} key={p.id} />);\r\n    let onSubmit = (formData) => {\r\n        props.addPost(formData.addNewPost);\r\n    }\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddPostFormReact onSubmit={onSubmit} />\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\nconst AddPostForm = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={TextArea} name='addNewPost' validate={[required, maxLength]} placeholder={'Post message...'} />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst AddPostFormReact = reduxForm({\r\n    form: 'addPostForm'\r\n})(AddPostForm)\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from './MyPosts';\r\nimport { connect } from 'react-redux';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostContainer = connect(mapStateToProps,mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostContainer from './MyPosts/MyPostContainer';\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo {...props} isOwner={props.isOwner} savePhoto={props.savePhoto} saveProfile={props.saveProfile} profileUpdateStatus={props.profileUpdateStatus} />\r\n            <MyPostContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Profile;","function defaultEqualityCheck(a, b) {\n  return a === b;\n}\n\nfunction areArgumentsShallowlyEqual(equalityCheck, prev, next) {\n  if (prev === null || next === null || prev.length !== next.length) {\n    return false;\n  } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n  var length = prev.length;\n\n  for (var i = 0; i < length; i++) {\n    if (!equalityCheck(prev[i], next[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport function defaultMemoize(func) {\n  var equalityCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultEqualityCheck;\n  var lastArgs = null;\n  var lastResult = null; // we reference arguments instead of spreading them for performance reasons\n\n  return function () {\n    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\n      // apply arguments instead of spreading for performance.\n      lastResult = func.apply(null, arguments);\n    }\n\n    lastArgs = arguments;\n    return lastResult;\n  };\n}\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep;\n    }).join(', ');\n    throw new Error('Selector creators expect all input-selectors to be functions, ' + ('instead received the following types: [' + dependencyTypes + ']'));\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptions = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptions[_key - 1] = arguments[_key];\n  }\n\n  return function () {\n    for (var _len2 = arguments.length, funcs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var recomputations = 0;\n    var resultFunc = funcs.pop();\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(undefined, [function () {\n      recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(memoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function () {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      return memoizedResultFunc.apply(null, params);\n    });\n    selector.resultFunc = resultFunc;\n    selector.dependencies = dependencies;\n\n    selector.recomputations = function () {\n      return recomputations;\n    };\n\n    selector.resetRecomputations = function () {\n      return recomputations = 0;\n    };\n\n    return selector;\n  };\n}\nexport var createSelector = createSelectorCreator(defaultMemoize);\nexport function createStructuredSelector(selectors) {\n  var selectorCreator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : createSelector;\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + ('where each property is a selector, instead received a ' + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  return selectorCreator(objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n}","import { createSelector } from \"reselect\"\r\n\r\nlet getProfileSelector = (state) => {\r\n    return state.profilePage.profile\r\n}\r\nexport let getProfile = createSelector(getProfileSelector,(profile) => {\r\n    return profile;\r\n});\r\nexport let getProfileStatus = (state) => {\r\n    return state.profilePage.status\r\n}\r\nexport let getAuthorizedUserId = (state) => {\r\n    return state.auth.id\r\n}\r\nexport let getIsAuth = (state) => {\r\n    return state.auth.isAuth\r\n}\r\nexport let getProfileUpdateStatus = (state) => {\r\n    return state.profilePage.profileUpdateStatus\r\n}","import React,{useEffect} from 'react';\r\nimport Profile from \"./Profile\";\r\nimport { setUsersProfile, setProfileUser,getStatus,updateStatus,savePhoto,saveProfile } from '../../redux/profile-reducer';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\nimport { getProfile, getAuthorizedUserId , getProfileStatus} from '../../redux/profile-selects';\r\nimport { getProfileUpdateStatus } from './../../redux/profile-selects';\r\n\r\nconst ProfileContainer= (props) => {\r\n    const refreshProfile =  () => {\r\n        let userId = props.match.params.userId;\r\n        if(!userId) {\r\n            userId = props.authorizedUserId;\r\n            if(!userId) {\r\n                props.history.push('/login');\r\n            }\r\n        }\r\n        props.setProfileUser(userId);\r\n        props.getStatus(userId);\r\n    }\r\n    useEffect(() => {\r\n        refreshProfile();\r\n    },[props.match.params.userId])\r\n    useEffect(() => {\r\n        refreshProfile();\r\n    },[])\r\n    return (\r\n        <div>\r\n            \r\n            <Profile {...props} isOwner={!props.match.params.userId} savePhoto={props.savePhoto} saveProfile={props.saveProfile} profileUpdateStatus={props.profileUpdateStatus}/>\r\n        </div>\r\n    )\r\n}\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        profile: getProfile(state),\r\n        status: getProfileStatus(state),\r\n        authorizedUserId: getAuthorizedUserId(state),\r\n        profileUpdateStatus: getProfileUpdateStatus(state)\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect (mapStateToProps, {\r\n        setUsersProfile,\r\n        setProfileUser,\r\n        getStatus,\r\n        updateStatus,\r\n        savePhoto,\r\n        saveProfile\r\n    }),\r\n    withRouter,\r\n)(ProfileContainer);\r\n\r\n"],"sourceRoot":""}